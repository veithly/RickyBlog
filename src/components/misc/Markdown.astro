---
import '@fontsource-variable/jetbrains-mono'
import '@fontsource-variable/jetbrains-mono/wght-italic.css'

interface Props {
  class: string
}
const className = Astro.props.class
---
<div data-pagefind-body class=`prose dark:prose-invert prose-base !max-w-none custom-md ${className}`>
    <!--<div class="prose dark:prose-invert max-w-none custom-md">-->
    <!--<div class="max-w-none custom-md">-->
    <slot/>
</div>

<script>
  import mermaid from 'mermaid';

  const observer = new MutationObserver(addPreCopyButton);
  observer.observe(document.body, { childList: true, subtree: true });

  function addPreCopyButton() {
    observer.disconnect();

    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      if (codeBlock.parentElement?.nodeName === "DIV" && codeBlock.parentElement?.classList.contains("code-block")) continue

      let wrapper = document.createElement("div");
      wrapper.className = "relative code-block";

      let copyButton = document.createElement("button");
      copyButton.className = "copy-btn btn-regular-dark absolute active:scale-90 h-8 w-8 top-2 right-2 opacity-75 text-sm p-1.5 rounded-lg transition-all ease-in-out";

      codeBlock.setAttribute("tabindex", "0");
      if (codeBlock.parentNode) {
        codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      }

      let copyIcon = `<svg class="copy-btn-icon copy-icon" xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px"><path d="M368.37-237.37q-34.48 0-58.74-24.26-24.26-24.26-24.26-58.74v-474.26q0-34.48 24.26-58.74 24.26-24.26 58.74-24.26h378.26q34.48 0 58.74 24.26 24.26 24.26 24.26 58.74v474.26q0 34.48-24.26 58.74-24.26 24.26-58.74 24.26H368.37Zm0-83h378.26v-474.26H368.37v474.26Zm-155 238q-34.48 0-58.74-24.26-24.26-24.26-24.26-58.74v-515.76q0-17.45 11.96-29.48 11.97-12.02 29.33-12.02t29.54 12.02q12.17 12.03 12.17 29.48v515.76h419.76q17.45 0 29.48 11.96 12.02 11.97 12.02 29.33t-12.02 29.54q-12.03 12.17-29.48 12.17H213.37Zm155-238v-474.26 474.26Z"/></svg>`
      let successIcon = `<svg class="copy-btn-icon success-icon" xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px"><path d="m389-377.13 294.7-294.7q12.58-12.67 29.52-12.67 16.93 0 29.61 12.67 12.67 12.68 12.67 29.53 0 16.86-12.28 29.14L419.07-288.41q-12.59 12.67-29.52 12.67-16.94 0-29.62-12.67L217.41-430.93q-12.67-12.68-12.79-29.45-.12-16.77 12.55-29.45 12.68-12.67 29.62-12.67 16.93 0 29.28 12.67L389-377.13Z"/></svg>`
      copyButton.innerHTML = `<div>${copyIcon} ${successIcon}</div>
      `

      wrapper.appendChild(codeBlock);
      wrapper.appendChild(copyButton);

      let timeout: ReturnType<typeof setTimeout>;
      copyButton.addEventListener("click", async () => {
        if (timeout) {
            clearTimeout(timeout);
        }
        let text = codeBlock?.querySelector("code")?.innerText;
        if (text === undefined) return;
        await navigator.clipboard.writeText(text);
        copyButton.classList.add("success");
        timeout = setTimeout(() => {
          copyButton.classList.remove("success");
        }, 1000);
      });
    }

    observer.observe(document.body, { childList: true, subtree: true });

    // Initialize and process Mermaid diagrams
    initializeMermaid();
  }

  // Enhanced Mermaid initialization with better text wrapping support
  function initializeMermaid() {
    mermaid.initialize({
      startOnLoad: false,
      theme: document.documentElement.classList.contains('dark') ? 'dark' : 'base',
      themeVariables: {
        primaryColor: 'var(--primary)',
        primaryTextColor: 'var(--text-primary)',
        primaryBorderColor: 'var(--glass-border)',
        lineColor: 'var(--primary)',
        secondaryColor: 'var(--card-glass-bg)',
        tertiaryColor: 'var(--glass-bg)',
        background: 'var(--card-bg)',
        mainBkg: 'var(--card-glass-bg)',
        secondBkg: 'var(--glass-bg)',
      },
      flowchart: {
        useMaxWidth: true,
        htmlLabels: true,
        curve: 'basis',
        nodeSpacing: 50,
        rankSpacing: 50,
        padding: 15,
        wrappingWidth: 200,
      },
      sequence: {
        useMaxWidth: true,
        wrap: true,
        width: 150,
      },
      fontSize: 14,
      fontFamily: 'inherit',
    });

    processMermaidDiagrams();
  }

  function processMermaidDiagrams() {
    const mermaidBlocks = document.querySelectorAll('pre code.language-mermaid');

    mermaidBlocks.forEach((block, index) => {
      const pre = block.parentElement;
      if (!pre) return;

      // Get the mermaid code and process it for better text wrapping
      let code = block.textContent || '';

      // Enhance code for better text wrapping using markdown strings
      code = code
        // Convert HTML line breaks to proper line breaks
        .replace(/<br\s*\/?>/gi, '\n')
        // Wrap long text in backticks for auto-wrapping (Mermaid v10.1.0+ feature)
        .replace(/([^`])"([^"]{25,})"([^`])/g, '$1"`$2`"$3')
        // Handle Chinese/Unicode text
        .replace(/([^`])([^\x00-\x7F]{15,})([^`])/g, '$1"`$2`"$3');

      // Create container with glass effect
      const container = document.createElement('div');
      container.className = 'mermaid-container glass-card p-6 my-6 rounded-xl overflow-x-auto';
      container.style.cssText = `
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        backdrop-filter: blur(var(--glass-backdrop-blur)) saturate(var(--glass-backdrop-saturate));
        -webkit-backdrop-filter: blur(var(--glass-backdrop-blur)) saturate(var(--glass-backdrop-saturate));
        box-shadow: 0 8px 32px var(--glass-shadow);
      `;

      const mermaidDiv = document.createElement('div');
      mermaidDiv.className = 'mermaid';
      mermaidDiv.textContent = code;

      container.appendChild(mermaidDiv);
      pre.parentNode?.replaceChild(container, pre);
    });

    // Render all mermaid diagrams
    mermaid.run();
  }

  // Listen for theme changes and re-initialize Mermaid
  const themeObserver = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
        initializeMermaid();
      }
    });
  });

  themeObserver.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['class']
  });

  // Re-process on page navigation (for SPA)
  if (window.swup) {
    window.swup.hooks.on('content:replace', () => {
      initializeMermaid();
    });
  }
</script>
